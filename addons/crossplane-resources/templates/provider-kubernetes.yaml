# 1. Create a ServiceAccount first that the Kubernetes provider will use.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubernetes-provider-cluster-admin

---
# 2. Create the ClusterRoleBinding to grant the ServiceAccount the necessary permissions.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: provider-kubernetes-admin-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: kubernetes-provider-cluster-admin
    namespace: crossplane-system

---
# 3. Configure the ControllerConfig for the Kubernetes provider to use the ServiceAccount.
apiVersion: pkg.crossplane.io/v1alpha1
kind: ControllerConfig
metadata:
  name: kubernetes-controller-config
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  serviceAccountName: kubernetes-provider-cluster-admin

---
# 4. Install the Kubernetes Provider with a reference to the above ControllerConfig.
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-kubernetes
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  package: "xpkg.upbound.io/crossplane-contrib/provider-kubernetes:v0.9.0"
  controllerConfigRef:
    name: kubernetes-controller-config

---
# 5. Configure Kubernetes's ProviderConfig for default settings.
apiVersion: kubernetes.crossplane.io/v1alpha1
kind: ProviderConfig
metadata:
  name: kubernetes-provider
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  credentials:
    source: InjectedIdentity
