# 1. Create a ServiceAccount first that the Helm provider will use.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: provider-helm-cluster-admin

---
# 2. Create the ClusterRoleBinding for the ServiceAccount to grant necessary permissions.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: provider-helm-admin-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: provider-helm-cluster-admin
    namespace: crossplane-system

---
# 3. Set the ControllerConfig to use the ServiceAccount. This dictates how the Helm provider controller runs.
apiVersion: pkg.crossplane.io/v1alpha1
kind: ControllerConfig
metadata:
  name: helm-config-debug
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  serviceAccountName: provider-helm-cluster-admin
  args:
    - '--debug'

---
# 4. Install the Helm Provider with a reference to the above ControllerConfig.
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: crossplane-provider-helm
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  package: xpkg.upbound.io/crossplane-contrib/provider-helm:v0.15.0
  controllerConfigRef:
    name: helm-config-debug

---
# 5. Configure Helm's ProviderConfig for default settings.
apiVersion: helm.crossplane.io/v1beta1
kind: ProviderConfig
metadata:
  name: default
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  credentials:
    source: InjectedIdentity
